<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Teacher Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body { background-color: #f5f5f5; padding: 20px; }
    .container { max-width: 900px; margin: auto; }
    .card { margin-bottom: 30px; }
    li { margin-bottom: 10px; }
  </style>
</head>
<body>
  <div class="container">
    <h2 class="text-center mb-4">Teacher Dashboard</h2>

    <div class="card">
      <div class="card-header bg-primary text-white">Schedule Appointment</div>
      <div class="card-body">
        <form id="scheduleForm" onsubmit="scheduleAppointment(event)">
          <div class="mb-3">
            <label class="form-label">Appointment Title</label>
            <input type="text" class="form-control" id="title" required />
          </div>
          <div class="mb-3">
            <label class="form-label">Student Email</label>
            <input type="email" class="form-control" id="studentEmail" required />
          </div>
          <div class="mb-3">
            <label class="form-label">Department</label>
            <input type="text" class="form-control" id="department" required />
          </div>
          <div class="mb-3">
            <label class="form-label">Subject</label>
            <input type="text" class="form-control" id="subject" required />
          </div>
          <div class="mb-3">
            <label class="form-label">Appointment Date & Time</label>
            <input type="datetime-local" class="form-control" id="time" required />
          </div>
          <div class="text-end">
            <button type="submit" class="btn btn-success">Schedule</button>
          </div>
        </form>
      </div>
    </div>

    <div class="card">
      <div class="card-header bg-info text-white">Messages</div>
      <div class="card-body">
        <ul class="list-group" id="messagesList">
          <li class="list-group-item">Loading messages...</li>
        </ul>
      </div>
    </div>

    <div class="card">
      <div class="card-header bg-warning text-dark">Appointments</div>
      <div class="card-body">
        <ul class="list-group" id="appointmentsList">
          <li class="list-group-item">Loading appointments...</li>
        </ul>
      </div>
    </div>

    <div class="text-end">
      <button class="btn btn-danger" onclick="logout()">Logout</button>
    </div>
  </div>

  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.8.1/firebase-app.js";
    import {
      getFirestore, collection, query, where, onSnapshot,
      addDoc, updateDoc, doc, orderBy, serverTimestamp
    } from "https://www.gstatic.com/firebasejs/11.8.1/firebase-firestore.js";
    import { getAuth, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/11.8.1/firebase-auth.js";

    const firebaseConfig = {
      apiKey: "AIzaSyDBq46naDEGOMX_8psHUCyE14eZKFiOi5k",
      authDomain: "student-3ff50.firebaseapp.com",
      projectId: "student-3ff50",
      storageBucket: "student-3ff50.firebasestorage.app",
      messagingSenderId: "117896468121",
      appId: "1:117896468121:web:25885acc15551edfe54a08"
    };

    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    const auth = getAuth(app);

    let teacherEmail = "";

    onAuthStateChanged(auth, (user) => {
      if (user) {
        teacherEmail = user.email;
        loadMessages();
        loadAppointments();
        document.getElementById("scheduleForm").style.display = "block";
      } else {
        window.location.href = "index.html";
      }
    });

    function loadMessages() {
      const q = query(collection(db, "messages"), where("to", "==", teacherEmail), orderBy("timestamp", "desc"));
      onSnapshot(q, (snapshot) => {
        const messagesList = document.getElementById("messagesList");
        messagesList.innerHTML = "";
        snapshot.forEach((doc) => {
          const msg = doc.data();
          const timeStr = msg.timestamp ? new Date(msg.timestamp.seconds * 1000).toLocaleString() : "Unknown time";
          const li = document.createElement("li");
          li.className = "list-group-item";
          li.innerHTML = `<strong>[${timeStr}]</strong> From: ${msg.from}<br>${msg.message}`;
          messagesList.appendChild(li);
        });
      });
    }

    function loadAppointments() {
      const q = query(collection(db, "appointments"), where("teacher", "==", teacherEmail), orderBy("time", "desc"));
      onSnapshot(q, (snapshot) => {
        const list = document.getElementById("appointmentsList");
        list.innerHTML = "";
        snapshot.forEach((docSnap) => {
          const appt = docSnap.data();
          const id = docSnap.id;
          const timeStr = appt.time ? new Date(appt.time).toLocaleString() : "Unknown time";
          const li = document.createElement("li");
          li.className = "list-group-item";
          li.innerHTML = `
            <strong>${appt.title}</strong><br>
            Student: ${appt.student}<br>
            Dept: ${appt.department} | Subject: ${appt.subject}<br>
            Time: ${timeStr} | Status: <span id="status-${id}">${appt.status}</span><br>
            <div class="mt-2">
              <button class="btn btn-sm btn-success" onclick="changeAppointmentStatus('${id}', 'approved')">Approve</button>
              <button class="btn btn-sm btn-danger" onclick="changeAppointmentStatus('${id}', 'cancelled')">Cancel</button>
            </div>`;
          list.appendChild(li);
        });
      });
    }

    window.scheduleAppointment = async (e) => {
      e.preventDefault();
      const title = document.getElementById("title").value.trim();
      const student = document.getElementById("studentEmail").value.trim();
      const department = document.getElementById("department").value.trim();
      const subject = document.getElementById("subject").value.trim();
      const timeStr = document.getElementById("time").value;

      if (!title || !student || !department || !subject || !timeStr) {
        alert("Please fill all fields.");
        return;
      }

      const time = new Date(timeStr).getTime();

      try {
        await addDoc(collection(db, "appointments"), {
          title,
          teacher: teacherEmail,
          student,
          department,
          subject,
          time,
          status: "pending",
          createdAt: serverTimestamp()
        });
        alert("Appointment scheduled.");
        e.target.reset();
      } catch (error) {
        alert("Failed to schedule appointment.");
        console.error(error);
      }
    };

    window.changeAppointmentStatus = async (id, status) => {
      try {
        await updateDoc(doc(db, "appointments", id), { status });
        document.getElementById(`status-${id}`).textContent = status;
      } catch (err) {
        alert("Status update failed.");
        console.error(err);
      }
    };

    window.logout = async () => {
      try {
        await signOut(auth);
        window.location.href = "index.html";
      } catch (err) {
        alert("Logout failed.");
      }
    };
  </script>
</body>
</html>
